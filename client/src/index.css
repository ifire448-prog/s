@tailwind base;
@tailwind components;
@tailwind utilities;

/* LIGHT MODE */
:root {
  --button-outline: rgba(0,0,0, .10);
  --badge-outline: rgba(0,0,0, .05);

  /* Automatic computation of border around primary / danger buttons */
  --opaque-button-border-intensity: -8; /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(0,0,0, .03);
  --elevate-2: rgba(0,0,0, .08);

  --background: 0 0% 98%;

  --foreground: 0 0% 10%;

  --border: 0 0% 88%;

  --card: 0 0% 96%;

  --card-foreground: 0 0% 10%;

  --card-border: 0 0% 90%;

  --sidebar: 0 0% 94%;

  --sidebar-foreground: 0 0% 10%;

  --sidebar-border: 0 0% 86%;

  --sidebar-primary: 330 85% 50%;

  --sidebar-primary-foreground: 330 85% 98%;

  --sidebar-accent: 0 4% 88%;

  --sidebar-accent-foreground: 0 0% 10%;

  --sidebar-ring: 330 85% 50%;

  --popover: 0 0% 92%;

  --popover-foreground: 0 0% 10%;

  --popover-border: 0 0% 84%;

  --primary: 330 85% 50%;

  --primary-foreground: 330 85% 98%;

  --secondary: 0 4% 86%;

  --secondary-foreground: 0 0% 10%;

  --muted: 0 5% 90%;

  --muted-foreground: 0 0% 35%;

  --accent: 0 6% 88%;

  --accent-foreground: 0 0% 10%;

  --destructive: 0 84% 48%;

  --destructive-foreground: 0 84% 98%;

  --input: 0 0% 75%;
  --ring: 330 85% 50%;
  --chart-1: 330 85% 40%;
  --chart-2: 185 85% 40%;
  --chart-3: 270 75% 45%;
  --chart-4: 35 85% 45%;
  --chart-5: 150 70% 40%;

  --font-sans: Inter, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Menlo, monospace;
  --radius: .5rem; /* 8px */
  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);
  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);
  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);
  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);
  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);
  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);
  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);
  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);
  --tracking-normal: 0em;
  --spacing: 0.25rem;

  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */

  /* Fallback for older browsers */
  --sidebar-primary-border: hsl(var(--sidebar-primary));
  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --sidebar-accent-border: hsl(var(--sidebar-accent));
  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --primary-border: hsl(var(--primary));
  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --secondary-border: hsl(var(--secondary));
  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --muted-border: hsl(var(--muted));
  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --accent-border: hsl(var(--accent));
  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --destructive-border: hsl(var(--destructive));
  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
}

.dark {
  --button-outline: rgba(255,255,255, .10);
  --badge-outline: rgba(255,255,255, .05);

  --opaque-button-border-intensity: 9;  /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(255,255,255, .04);
  --elevate-2: rgba(255,255,255, .09);

  --background: 0 0% 0%;

  --foreground: 0 0% 98%;

  --border: 0 0% 15%;

  --card: 0 0% 5%;

  --card-foreground: 0 0% 98%;

  --card-border: 0 0% 12%;

  --sidebar: 0 0% 3%;

  --sidebar-foreground: 0 0% 98%;

  --sidebar-border: 0 0% 10%;

  --sidebar-primary: 330 85% 60%;

  --sidebar-primary-foreground: 0 0% 100%;

  --sidebar-accent: 0 0% 8%;

  --sidebar-accent-foreground: 0 0% 98%;

  --sidebar-ring: 330 85% 60%;

  --popover: 0 0% 5%;

  --popover-foreground: 0 0% 98%;

  --popover-border: 0 0% 15%;

  --primary: 330 85% 60%;

  --primary-foreground: 0 0% 100%;

  --secondary: 185 85% 55%;

  --secondary-foreground: 0 0% 100%;

  --muted: 0 0% 10%;

  --muted-foreground: 0 0% 60%;

  --accent: 0 0% 12%;

  --accent-foreground: 0 0% 98%;

  --destructive: 0 84% 52%;

  --destructive-foreground: 0 0% 100%;

  --input: 0 0% 25%;
  --ring: 330 85% 55%;
  --chart-1: 330 85% 70%;
  --chart-2: 185 85% 70%;
  --chart-3: 270 75% 75%;
  --chart-4: 35 85% 70%;
  --chart-5: 150 70% 70%;

  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);
  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);
  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);
  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);
  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);
  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);
  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);
  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);

  /* Fallback for older browsers */
  --sidebar-primary-border: hsl(var(--sidebar-primary));
  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --sidebar-accent-border: hsl(var(--sidebar-accent));
  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --primary-border: hsl(var(--primary));
  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --secondary-border: hsl(var(--secondary));
  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --muted-border: hsl(var(--muted));
  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --accent-border: hsl(var(--accent));
  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --destructive-border: hsl(var(--destructive));
  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

/**
 * Using the elevate system.
 * Automatic contrast adjustment.
 *
 * <element className="hover-elevate" />
 * <element className="active-elevate-2" />
 *
 * // Using the tailwind utility when a data attribute is "on"
 * <element className="toggle-elevate data-[state=on]:toggle-elevated" />
 * // Or manually controlling the toggle state
 * <element className="toggle-elevate toggle-elevated" />
 *
 * Elevation systems have to handle many states.
 * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)
 * - toggled or not
 * - focused or not (this is not handled with these utilities)
 *
 * Even without handling focused or not, this is six possible combinations that
 * need to be distinguished from eachother visually.
 */
@layer utilities {

  /* Hide ugly search cancel button in Chrome until we can style it properly */
  input[type="search"]::-webkit-search-cancel-button {
    @apply hidden;
  }

  /* Placeholder styling for contentEditable div */
  [contenteditable][data-placeholder]:empty::before {
    content: attr(data-placeholder);
    color: hsl(var(--muted-foreground));
    pointer-events: none;
  }

  /* GPU-optimized animations */
  .gpu-accelerated {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
  }

  /* Smooth fade-in animation */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Slide up animation */
  @keyframes slideUp {
    from {
      transform: translateY(100%);
    }
    to {
      transform: translateY(0);
    }
  }

  /* Scale bounce animation */
  @keyframes scaleBounce {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  /* Shimmer effect for loading states */
  @keyframes shimmer {
    0% {
      background-position: -1000px 0;
    }
    100% {
      background-position: 1000px 0;
    }
  }

  .animate-fadeIn {
    animation: fadeIn 0.3s ease-out;
  }

  .animate-slideUp {
    animation: slideUp 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-scaleBounce {
    animation: scaleBounce 0.3s ease-in-out;
  }

  .shimmer {
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    background-size: 1000px 100%;
    animation: shimmer 2s infinite;
  }

  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of
   * buttons/badges can remove the automatic brightness adjustment on interactions
   * and program their own. */
  .no-default-hover-elevate {}

  .no-default-active-elevate {}


  /**
   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.
   * This way they can stack/compound. Both will overlap the parent's borders!
   * So borders will be automatically adjusted both on toggle, and hover/active,
   * and they will be compounded.
   */
  .toggle-elevate::before,
  .toggle-elevate-2::before {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: -1;
    /* sits behind content but above backdrop */
  }

  .toggle-elevate.toggle-elevated::before {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.toggle-elevate::before {
    inset: -1px;
  }

  /* Does not work on elements with overflow:hidden! */
  .hover-elevate:not(.no-default-hover-elevate),
  .active-elevate:not(.no-default-active-elevate),
  .hover-elevate-2:not(.no-default-hover-elevate),
  .active-elevate-2:not(.no-default-active-elevate) {
    position: relative;
    z-index: 0;
  }

  .hover-elevate:not(.no-default-hover-elevate)::after,
  .active-elevate:not(.no-default-active-elevate)::after,
  .hover-elevate-2:not(.no-default-hover-elevate)::after,
  .active-elevate-2:not(.no-default-active-elevate)::after {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: 999;
    /* sits in front of content */
  }

  .hover-elevate:hover:not(.no-default-hover-elevate)::after,
  .active-elevate:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-1);
  }

  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,
  .active-elevate-2:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {
    inset: -1px;
  }

  /* ===== FANCY UI ANIMATIONS ===== */

  /* Floating animation */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  /* Glow pulse animation */
  @keyframes glowPulse {
    0%, 100% {
      box-shadow: 0 0 20px hsl(var(--primary) / 0.3),
                  0 0 40px hsl(var(--primary) / 0.2);
    }
    50% {
      box-shadow: 0 0 30px hsl(var(--primary) / 0.5),
                  0 0 60px hsl(var(--primary) / 0.3);
    }
  }

  /* Neon glow */
  @keyframes neonGlow {
    0%, 100% {
      text-shadow: 0 0 10px hsl(var(--primary) / 0.8),
                   0 0 20px hsl(var(--primary) / 0.6),
                   0 0 30px hsl(var(--primary) / 0.4);
    }
    50% {
      text-shadow: 0 0 20px hsl(var(--primary) / 1),
                   0 0 30px hsl(var(--primary) / 0.8),
                   0 0 40px hsl(var(--primary) / 0.6);
    }
  }

  /* Rainbow gradient shift */
  @keyframes rainbowShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  /* Rotate 3D */
  @keyframes rotate3D {
    0% { transform: rotateY(0deg) rotateX(0deg); }
    50% { transform: rotateY(180deg) rotateX(10deg); }
    100% { transform: rotateY(360deg) rotateX(0deg); }
  }

  /* Particle float */
  @keyframes particleFloat {
    0% {
      transform: translateY(0) translateX(0) scale(1);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(-100vh) translateX(50px) scale(0);
      opacity: 0;
    }
  }

  /* Ripple effect */
  @keyframes ripple {
    0% {
      transform: scale(0);
      opacity: 1;
    }
    100% {
      transform: scale(4);
      opacity: 0;
    }
  }

  /* Magnetic pull effect */
  @keyframes magneticPull {
    0% { transform: scale(1) rotate(0deg); }
    50% { transform: scale(1.05) rotate(2deg); }
    100% { transform: scale(1) rotate(0deg); }
  }

  /* Gradient wave */
  @keyframes gradientWave {
    0% {
      background-position: 0% 0%;
    }
    50% {
      background-position: 100% 100%;
    }
    100% {
      background-position: 0% 0%;
    }
  }

  /* Blink shine */
  @keyframes blinkShine {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  /* Bounce in */
  @keyframes bounceIn {
    0% {
      transform: scale(0.3);
      opacity: 0;
    }
    50% {
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Slide in from right */
  @keyframes slideInRight {
    0% {
      transform: translateX(100%);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Slide in from left */
  @keyframes slideInLeft {
    0% {
      transform: translateX(-100%);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Zoom in */
  @keyframes zoomIn {
    0% {
      transform: scale(0);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Utility classes for animations */
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  .animate-glow-pulse {
    animation: glowPulse 2s ease-in-out infinite;
  }

  .animate-neon {
    animation: neonGlow 1.5s ease-in-out infinite;
  }

  .animate-rainbow {
    background: linear-gradient(
      45deg,
      #ff0080,
      #ff8c00,
      #40e0d0,
      #ff0080
    );
    background-size: 300% 300%;
    animation: rainbowShift 3s ease infinite;
  }

  .animate-rotate3d {
    animation: rotate3D 10s linear infinite;
    transform-style: preserve-3d;
  }

  .animate-bounceIn {
    animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  .animate-slideInRight {
    animation: slideInRight 0.5s ease-out;
  }

  .animate-slideInLeft {
    animation: slideInLeft 0.5s ease-out;
  }

  .animate-zoomIn {
    animation: zoomIn 0.4s ease-out;
  }

  /* Gradient border animation */
  .gradient-border {
    position: relative;
    background: linear-gradient(
      45deg,
      hsl(var(--primary)),
      hsl(var(--secondary)),
      hsl(var(--primary))
    );
    background-size: 200% 200%;
    animation: gradientWave 3s ease infinite;
    border-radius: inherit;
  }

  .gradient-border::before {
    content: '';
    position: absolute;
    inset: 2px;
    background: hsl(var(--background));
    border-radius: inherit;
    z-index: -1;
  }

  /* Glass morphism effect */
  .glass {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .glass-dark {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Neon glow effects */
  .neon-primary {
    box-shadow: 0 0 10px hsl(var(--primary) / 0.5),
                0 0 20px hsl(var(--primary) / 0.3),
                0 0 30px hsl(var(--primary) / 0.2);
  }

  .neon-text {
    text-shadow: 0 0 10px hsl(var(--primary) / 0.8),
                 0 0 20px hsl(var(--primary) / 0.6),
                 0 0 30px hsl(var(--primary) / 0.4);
  }

  /* Hover effects */
  .hover-lift {
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1),
                box-shadow 0.3s ease;
  }

  .hover-lift:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .hover-glow:hover {
    box-shadow: 0 0 30px hsl(var(--primary) / 0.6),
                0 0 60px hsl(var(--primary) / 0.3);
    transition: box-shadow 0.3s ease;
  }

  .hover-tilt {
    transition: transform 0.3s ease;
  }

  .hover-tilt:hover {
    transform: perspective(1000px) rotateX(5deg) rotateY(-5deg) scale(1.05);
  }

  /* Ripple button effect */
  .ripple-button {
    position: relative;
    overflow: hidden;
  }

  .ripple-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .ripple-button:active::after {
    width: 300px;
    height: 300px;
    opacity: 0;
  }

  /* Particle container */
  .particles {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
  }

  .particle {
    position: absolute;
    bottom: -10px;
    width: 10px;
    height: 10px;
    background: hsl(var(--primary) / 0.6);
    border-radius: 50%;
    animation: particleFloat 10s linear infinite;
  }

  /* Glitch effect */
  @keyframes glitch {
    0% {
      transform: translate(0);
    }
    20% {
      transform: translate(-2px, 2px);
    }
    40% {
      transform: translate(-2px, -2px);
    }
    60% {
      transform: translate(2px, 2px);
    }
    80% {
      transform: translate(2px, -2px);
    }
    100% {
      transform: translate(0);
    }
  }

  .glitch:hover {
    animation: glitch 0.3s ease-in-out;
  }

  /* Scanline effect */
  @keyframes scanline {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(100%);
    }
  }

  .scanline::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(
      to bottom,
      transparent,
      rgba(255, 255, 255, 0.8),
      transparent
    );
    animation: scanline 3s linear infinite;
    pointer-events: none;
  }

  /* Shine effect */
  .shine {
    position: relative;
    overflow: hidden;
  }

  .shine::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.5s;
  }

  .shine:hover::before {
    left: 100%;
  }

  /* Breathing animation */
  @keyframes breathe {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.05);
      opacity: 0.8;
    }
  }

  .animate-breathe {
    animation: breathe 3s ease-in-out infinite;
  }

  /* Typewriter effect */
  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  @keyframes blink {
    50% {
      border-color: transparent;
    }
  }

  .typewriter {
    overflow: hidden;
    border-right: 2px solid hsl(var(--primary));
    white-space: nowrap;
    animation: typing 3s steps(40) 1s 1 normal both,
               blink 0.75s step-end infinite;
  }
}